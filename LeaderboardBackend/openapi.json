{
  "openapi": "3.0.1",
  "info": {
    "title": "LeaderboardBackend",
    "version": "v1"
  },
  "paths": {
    "/Account/register": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Registers a new User.",
        "requestBody": {
          "description": "The `RegisterRequest` instance from which register the `User`.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `User` was registered and returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModel"
                }
              }
            }
          },
          "409": {
            "description": "A `User` with the specified username or email already exists.<br /><br />\r\nValidation error codes by property:\r\n- **Username**:\r\n  - **UsernameTaken**: the username is already in use\r\n- **Email**:\r\n  - **EmailAlreadyUsed**: the email is already in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error"
          },
          "400": {
            "description": "The request was malformed."
          },
          "422": {
            "description": "The request contains errors.<br /><br />\r\nValidation error codes by property:\r\n- **Username**:\r\n  - **UsernameFormat**: Invalid username format\r\n- **Password**:\r\n  - **PasswordFormat**: Invalid password format\r\n- **Email**:\r\n  - **EmailValidator**: Invalid email format"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Logs a User in.",
        "requestBody": {
          "description": "The `LoginRequest` instance from which to perform the login.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The `User` was logged in successfully. A `LoginResponse` is returned, containing a token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "The password given was incorrect.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The associated `User` is banned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No `User` with the requested details could be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed."
          },
          "422": {
            "description": "The request contains errors.<br /><br />\r\nValidation error codes by property:\r\n- **Password**:\r\n  - **NotEmptyValidator**: No password was passed\r\n  - **PasswordFormat**: Invalid password format\r\n- **Email**:\r\n  - **NotNullValidator**: No email was passed\r\n  - **EmailValidator**: Invalid email format"
          }
        }
      }
    },
    "/Account/confirm": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Resends the account confirmation link.",
        "responses": {
          "200": {
            "description": "A new confirmation link was generated."
          },
          "400": {
            "description": "The request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "The request doesn't contain a valid session token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The `User`'s account has already been confirmed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "The account recovery email failed to be created."
          }
        }
      }
    },
    "/Account/recover": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Sends an account recovery email.",
        "requestBody": {
          "description": "The account recovery request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoverAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "This endpoint returns 200 OK regardless of whether the email was sent successfully or not."
          },
          "400": {
            "description": "The request object was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Account/confirm/{id}": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Confirms a user account.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The confirmation token.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The account was confirmed successfully."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The token provided was invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The user's account was either already confirmed or banned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Account/recover/{id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Tests an account recovery token for validity.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The recovery token.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The token provided is valid."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The token provided is invalid or expired, or the user is banned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Recover the user's account by resetting their password to a new value.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The recovery token.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The password recovery request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user's password was reset successfully."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The user is banned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The token provided is invalid or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The new password is the same as the user's existing password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "The request body contains errors.<br />\r\nA **PasswordFormat** Validation error on the Password field indicates that the password format is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Gets a Category by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the `Category` which should be retrieved.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `Category` was found and returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No `Category` with the requested ID could be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Categories": {
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Creates a new Category.\r\nThis request is restricted to Moderators.",
        "requestBody": {
          "description": "The `CreateCategoryRequest` instance from which to create the `Category`.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `Category` was created and returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryViewModel"
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requesting `User` is unauthorized to create a `Category`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Leaderboards/{id}": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Gets a Leaderboard by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the `Leaderboard` which should be retrieved.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `Leaderboard` was found and returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No `Leaderboard` with the requested ID or slug could be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Leaderboards/{slug}": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Gets a Leaderboard by its slug.",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "description": "The slug of the `Leaderboard` which should be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `Leaderboard` was found and returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No `Leaderboard` with the requested ID or slug could be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Leaderboards": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Gets Leaderboards by their IDs.",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "The IDs of the `Leaderboard`s which should be retrieved.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of `Leaderboard`s was retrieved successfully. The result can be an empty\r\ncollection.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaderboardViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Creates a new Leaderboard.\r\nThis request is restricted to Administrators.",
        "requestBody": {
          "description": "The `CreateLeaderboardRequest` instance from which to create the `Leaderboard`.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeaderboardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `Leaderboard` was created and returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardViewModel"
                }
              }
            }
          },
          "400": {
            "description": "The request was malformed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The requesting `User` is unauthorized to create `Leaderboard`s.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Runs/{id}": {
      "get": {
        "tags": [
          "Runs"
        ],
        "summary": "Gets a Run by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the `Run` which should be retrieved.<br />\r\nIt must be possible to parse this to `long` for this request to complete.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `Run` was found and returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No `Run` with the requested ID could be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Runs": {
      "post": {
        "tags": [
          "Runs"
        ],
        "summary": "Creates a new Run.",
        "requestBody": {
          "description": "The `CreateRunRequest` instance from which to create the `Run`.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRunRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `Run` was created and returned successfully."
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Runs/{id}/category": {
      "get": {
        "tags": [
          "Runs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a User by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the `User` which should be retrieved.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `User` was found and returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No `User` with the requested ID could be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the currently logged-in User.",
        "description": "Call this method with the 'Authorization' header. A valid JWT bearer token must be\r\npassed.<br />\r\nExample: `{ 'Authorization': 'Bearer JWT' }`.",
        "responses": {
          "200": {
            "description": "The `User` was found and returned successfully..",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModel"
                }
              }
            }
          },
          "403": {
            "description": "An invalid JWT was passed in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CalendarSystem": {
        "required": [
          "eras",
          "id",
          "maxYear",
          "minYear",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "minYear": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "maxYear": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "eras": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Era"
            },
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CategoryViewModel": {
        "required": [
          "id",
          "name",
          "slug"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the `Category`.<br />",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The display name of the `Category`.",
            "example": "Foo Bar Baz%"
          },
          "slug": {
            "type": "string",
            "description": "The URL-scoped unique identifier of the `Category`.<br />",
            "example": "foo-bar-baz"
          },
          "rules": {
            "type": "string",
            "description": "The rules of the `Category`.",
            "nullable": true,
            "example": "Video proof is required."
          }
        },
        "additionalProperties": false,
        "description": "Represents a `Category` tied to a `Leaderboard`."
      },
      "ChangePasswordRequest": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateCategoryRequest": {
        "required": [
          "leaderboardId",
          "name",
          "slug"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The display name of the `Category`.",
            "example": "Foo Bar Baz%"
          },
          "slug": {
            "minLength": 1,
            "type": "string",
            "description": "The URL-scoped unique identifier of the `Category`.<br />\r\nMust be [2, 25] in length and consist only of alphanumeric characters and hyphens.",
            "example": "foo-bar-baz"
          },
          "rules": {
            "type": "string",
            "description": "The rules of the `Category`.",
            "nullable": true,
            "example": "Video proof is required."
          },
          "leaderboardId": {
            "type": "integer",
            "description": "The ID of the `Leaderboard` the `Category` is a part of.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "This request object is sent when creating a `Category`."
      },
      "CreateLeaderboardRequest": {
        "required": [
          "name",
          "slug"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name of the `Leaderboard` to create.",
            "example": "Foo Bar"
          },
          "slug": {
            "type": "string",
            "description": "The URL-scoped unique identifier of the `Leaderboard`.<br />\r\nMust be [2, 80] in length and consist only of alphanumeric characters and hyphens.",
            "example": "foo-bar"
          }
        },
        "additionalProperties": false,
        "description": "This request object is sent when creating a `Leaderboard`."
      },
      "CreateRunRequest": {
        "required": [
          "categoryId",
          "playedOn",
          "submittedAt"
        ],
        "type": "object",
        "properties": {
          "playedOn": {
            "$ref": "#/components/schemas/LocalDate"
          },
          "submittedAt": {
            "$ref": "#/components/schemas/Instant"
          },
          "categoryId": {
            "type": "integer",
            "description": "The ID of the `Category` for the `Run`.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "This request object is sent when creating a `Run`."
      },
      "Era": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Instant": {
        "type": "object",
        "additionalProperties": false
      },
      "IsoDayOfWeek": {
        "enum": [
          "None",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday"
        ],
        "type": "string"
      },
      "LeaderboardViewModel": {
        "required": [
          "categories",
          "id",
          "name",
          "slug"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the `Leaderboard`.<br />\r\nGenerated on creation.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The display name of the `Leaderboard` to create.",
            "example": "Foo Bar"
          },
          "slug": {
            "type": "string",
            "description": "The URL-scoped unique identifier of the `Leaderboard`.<br />\r\nMust be [2, 80] in length and consist only of alphanumeric characters and hyphens.",
            "example": "foo-bar"
          },
          "rules": {
            "type": "string",
            "description": "The general rules for the Leaderboard.",
            "nullable": true,
            "example": "Timer starts on selecting New Game and ends when the final boss is beaten."
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryViewModel"
            },
            "description": "A collection of `Category` entities for the `Leaderboard`."
          }
        },
        "additionalProperties": false,
        "description": "Represents a collection of `Leaderboard` entities."
      },
      "LocalDate": {
        "required": [
          "calendar",
          "day",
          "dayOfWeek",
          "dayOfYear",
          "era",
          "month",
          "year",
          "yearOfEra"
        ],
        "type": "object",
        "properties": {
          "calendar": {
            "$ref": "#/components/schemas/CalendarSystem"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "dayOfWeek": {
            "$ref": "#/components/schemas/IsoDayOfWeek"
          },
          "yearOfEra": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "era": {
            "$ref": "#/components/schemas/Era"
          },
          "dayOfYear": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "The `User`'s email address.",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "minLength": 1,
            "type": "string",
            "description": "The `User`'s password. It:\r\n<ul><li>supports Unicode;</li><li>must be [8, 80] in length;</li><li>must have at least:</li><ul><li>one uppercase letter;</li><li>one lowercase letter; and</li><li>one number.</li></ul></ul>",
            "example": "P4ssword"
          }
        },
        "additionalProperties": false,
        "description": "This request object is sent when a `User` is attempting to log in."
      },
      "LoginResponse": {
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "minLength": 1,
            "type": "string",
            "description": "A JSON Web Token to authenticate and authorize queries with."
          }
        },
        "additionalProperties": false,
        "description": "This response object is received upon a successful log-in request."
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "RecoverAccountRequest": {
        "required": [
          "email",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "minLength": 1,
            "type": "string",
            "description": "The user's name."
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "The user's email address.",
            "format": "email"
          }
        },
        "additionalProperties": false
      },
      "RegisterRequest": {
        "required": [
          "email",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the `User`. It:\r\n<ul><li>must be [2, 25] in length;</li><li>must be made up of letters sandwiching zero or one of:</li><ul><li>hyphen;</li><li>underscore; or</li><li>apostrophe</li></ul></ul>\r\nUsernames are saved case-sensitively, but matched against case-insensitively.\r\nA `User` may not register with the name 'Cool' when another `User` with the name 'cool'\r\nexists.",
            "example": "J'on-Doe"
          },
          "email": {
            "type": "string",
            "description": "The `User`'s email address.",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "description": "The `User`'s password. It:\r\n<ul><li>supports Unicode;</li><li>must be [8, 80] in length;</li><li>must have at least:</li><ul><li>one uppercase letter;</li><li>one lowercase letter; and</li><li>one number.</li></ul></ul>",
            "example": "P4ssword"
          }
        },
        "additionalProperties": false,
        "description": "This request object is sent when a `User` is attempting to register."
      },
      "RunViewModel": {
        "required": [
          "categoryId",
          "id",
          "submittedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^[a-zA-Z0-9-_]{22}$",
            "type": "string",
            "description": "The unique identifier of the `Run`.<br />\r\nGenerated on creation."
          },
          "submittedAt": {
            "$ref": "#/components/schemas/Instant"
          },
          "categoryId": {
            "type": "integer",
            "description": "The ID of the `Category` for `Run`.",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "UserRole": {
        "enum": [
          "Registered",
          "Confirmed",
          "Administrator",
          "Banned"
        ],
        "type": "string"
      },
      "UserViewModel": {
        "required": [
          "id",
          "role",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^[a-zA-Z0-9-_]{22}$",
            "type": "string",
            "description": "The unique identifier of the `User`.<br />\r\nGenerated on creation."
          },
          "username": {
            "type": "string",
            "description": "The username of the `User`. It:\r\n<ul><li>must be [2, 25] in length;</li><li>must be made up of alphanumeric characters around zero or one of:</li><ul><li>hyphen;</li><li>underscore; or</li><li>apostrophe</li></ul></ul>\r\nUsernames are saved case-sensitively, but matcehd against case-insensitively.\r\nA `User` may not register with the name 'Cool' when another `User` with the name 'cool'\r\nexists.",
            "example": "J'on-Doe"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          }
        },
        "additionalProperties": false
      },
      "ValidationProblemDetails": {
        "required": [
          "errors"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "readOnly": true
          }
        },
        "additionalProperties": { }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT Authorization using the Bearer scheme",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}