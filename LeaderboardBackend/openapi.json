{
  "openapi": "3.0.4",
  "info": {
    "title": "LeaderboardBackend",
    "version": "v1"
  },
  "paths": {
    "/Account/register": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Registers a new User.",
        "operationId": "register",
        "requestBody": {
          "description": "The `RegisterRequest` instance from which to register the `User`.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RegisterRequest"
                  }
                ],
                "description": "This request object is sent when a `User` is attempting to register."
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "202": {
            "description": "The registration attempt was successfully received, and an email will\nbe sent to the provided address. If an account with that address does\nnot already exist, or if the account has not been confirmed yet, the\nemail will contain a link to confirm the account. Otherwise, the email\nwill inform the associated user that a registration attempt was made\nwith their address."
          },
          "409": {
            "description": "A `User` with the specified username already exists. The validation\nerror code `UsernameTaken` will be returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Logs a User in.",
        "operationId": "login",
        "requestBody": {
          "description": "The `LoginRequest` instance with which to perform the login.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LoginRequest"
                  }
                ],
                "description": "This request object is sent when a `User` is attempting to log in."
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "The `User` was logged in successfully. A `LoginResponse` is returned, containing a token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "The password given was incorrect, or no `User` could be found."
          },
          "403": {
            "description": "The associated `User` is banned."
          },
          "422": {
            "description": "The request contains errors.\nValidation error codes by property:\n- **Password**:\n  - **NotEmptyValidator**: No password was passed\n  - **PasswordFormat**: Invalid password format\n- **Email**:\n  - **NotEmptyValidator**: No email was passed\n  - **EmailValidator**: Invalid email format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/Account/confirm": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Resends the account confirmation link.",
        "operationId": "resendConfirmationEmail",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "The account recovery email failed to be created."
          },
          "200": {
            "description": "A new confirmation link was generated."
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "The `User`'s account has already been confirmed."
          }
        }
      }
    },
    "/Account/recover": {
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Sends an account recovery email.",
        "operationId": "sendRecoveryEmail",
        "requestBody": {
          "description": "The account recovery request.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RecoverAccountRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "This endpoint returns 200 OK regardless of whether the email was sent successfully or not."
          }
        }
      }
    },
    "/Account/confirm/{id}": {
      "put": {
        "tags": [
          "Account"
        ],
        "summary": "Confirms a user account.",
        "operationId": "confirmAccount",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The confirmation token.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "The account was confirmed successfully."
          },
          "404": {
            "description": "The token provided was invalid or expired."
          },
          "409": {
            "description": "the user's account was either already confirmed or banned."
          }
        }
      }
    },
    "/Account/recover/{id}": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Tests an account recovery token for validity.",
        "operationId": "testRecoveryToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The recovery token.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "The token provided is valid."
          },
          "404": {
            "description": "The token provided is invalid or expired, or the user is banned."
          }
        }
      },
      "post": {
        "tags": [
          "Account"
        ],
        "summary": "Recover the user's account by resetting their password to a new value.",
        "operationId": "changePassword",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The recovery token.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The password recovery request object.",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChangePasswordRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "The user's password was reset successfully."
          },
          "403": {
            "description": "The user is banned."
          },
          "404": {
            "description": "The token provided is invalid or expired."
          },
          "409": {
            "description": "The new password is the same as the user's existing password."
          },
          "422": {
            "description": "The request body contains errors.\nA **PasswordFormat** Validation error on the Password field indicates that the password format is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/categories/{id}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Gets a Category by its ID.",
        "operationId": "getCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryViewModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/leaderboards/{id}/categories/{slug}": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Gets a Category of Leaderboard `id` by its slug. Will not return deleted Categories.",
        "operationId": "getCategoryBySlug",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryViewModel"
                }
              }
            }
          },
          "404": {
            "description": "The Category either doesn't exist for the Leaderboard, or it has been deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/leaderboards/{id}/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Gets all Categories of Leaderboard `id`.",
        "operationId": "getCategoriesForLeaderboard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return. Fewer records may be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-based index at which to begin selecting records to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StatusFilter"
                }
              ],
              "default": "Published"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryViewModelListView"
                }
              }
            }
          },
          "404": {
            "description": "The Leaderboard with ID `id` could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/leaderboards/{id}/categories": {
      "post": {
        "tags": [
          "Categories"
        ],
        "summary": "Creates a new Category for a Leaderboard with ID `id`. This request is restricted to Administrators.",
        "operationId": "createCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateCategoryRequest"
                  }
                ],
                "description": "This request object is sent when creating a `Category`."
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "The requesting `User` is unauthorized to create Categories."
          },
          "404": {
            "description": "The Leaderboard with ID `id` could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "A Category with the specified slug already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryViewModelConflictDetails"
                }
              }
            }
          },
          "422": {
            "description": "The request contains errors. The following errors can occur: NotEmptyValidator, SlugFormat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{id}": {
      "patch": {
        "tags": [
          "Categories"
        ],
        "summary": "Updates a category with the specified new fields. This request is restricted to administrators. Note: `type` cannot be updated. This operation is atomic; if an error occurs, the category will not be updated. All fields of the request body are optional but you must specify at least one.",
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateCategoryRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The specified slug is already in use by another category. Returns the conflicting category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryViewModelConflictDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "summary": "Deletes a Category. This request is restricted to Administrators.",
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The Category does not exist (Not Found) or was already deleted (Already Deleted).\nUse the `title` field of the response to differentiate between the two cases if necessary.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/leaderboards/{id}": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Gets a leaderboard by its ID.",
        "operationId": "getLeaderboard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardViewModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/leaderboards/{slug}": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Gets a leaderboard by its slug. Will not return deleted boards.",
        "operationId": "getLeaderboardBySlug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardViewModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/leaderboards": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Gets leaderboards. Includes deleted, if specified.",
        "operationId": "listLeaderboards",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return. Fewer records may be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-based index at which to begin selecting records to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StatusFilter"
                }
              ],
              "default": "Published"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sorts results by a leaderboard's field, tie-breaking with IDs if needed.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortLeaderboardsBy"
                }
              ],
              "description": "Used in GetLeaderboards to sort leaderboards by a field.",
              "default": "Name_Asc"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardViewModelListView"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/leaderboards/search": {
      "get": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Search leaderboards by name or slug.",
        "operationId": "searchLeaderboards",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "The query string. Must not be empty.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return. Fewer records may be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-based index at which to begin selecting records to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StatusFilter"
                }
              ],
              "default": "Published"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardViewModelListView"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/leaderboards": {
      "post": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Creates a new leaderboard. This request is restricted to Administrators.",
        "operationId": "createLeaderboard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreateLeaderboardRequest"
                  }
                ],
                "description": "This request object is sent when creating a `Leaderboard`."
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardViewModel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "The requesting `User` is unauthorized to create `Leaderboard`s."
          },
          "409": {
            "description": "A Leaderboard with the specified slug already exists and will be returned in the `conflicting` field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardViewModelConflictDetails"
                }
              }
            }
          },
          "422": {
            "description": "The request contains errors. The following errors can occur: NotEmptyValidator, SlugFormat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/leaderboards/{id}": {
      "delete": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Deletes a leaderboard. This request is restricted to Administrators.",
        "operationId": "deleteLeaderboard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The leaderboard does not exist (Not Found) or was already deleted (Already Deleted).\nUse the title field of the response to differentiate between the two cases if necessary.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Leaderboards"
        ],
        "summary": "Updates a leaderboard with the specified new fields. This request is restricted to administrators. This operation is atomic; if an error occurs, the leaderboard will not be updated. All fields of the request body are optional but you must specify at least one.",
        "operationId": "updateLeaderboard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UpdateLeaderboardRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "The specified slug is already in use by another leaderboard. Returns the conflicting leaderboard.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaderboardViewModelConflictDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/runs/{id}": {
      "get": {
        "tags": [
          "Runs"
        ],
        "summary": "Gets a Run by its ID.",
        "operationId": "getRun",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TimedRunViewModel"
                    },
                    {
                      "$ref": "#/components/schemas/ScoredRunViewModel"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The Run with ID `id` could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{id}/runs": {
      "post": {
        "tags": [
          "Runs"
        ],
        "summary": "Creates a new Run for a Category with ID `id`. This request is restricted to confirmed Users and Administrators.",
        "operationId": "createRun",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateTimedRunRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CreateScoredRunRequest"
                  }
                ],
                "description": "Request sent when creating a Run. Set `runType` to `\"Time\"` for a timed\nrequest, and `\"Score\"` for a scored one. `runType` *must* be at the top\nof the request object."
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TimedRunViewModel"
                    },
                    {
                      "$ref": "#/components/schemas/ScoredRunViewModel"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "The client is not logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "The requesting User is unauthorized to create Runs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The Category with ID `id` could not be found, or has been deleted. Read `title` for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/categories/{id}/runs": {
      "get": {
        "tags": [
          "Runs"
        ],
        "summary": "Gets the Runs for a Category.",
        "operationId": "getRunsForCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return. Fewer records may be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-based index at which to begin selecting records to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StatusFilter"
                }
              ],
              "default": "Published"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunViewModelListView"
                }
              }
            }
          },
          "404": {
            "description": "The Category with ID `id` could not be found, or has been deleted. Read `title` for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/categories/{id}/records": {
      "get": {
        "tags": [
          "Runs"
        ],
        "summary": "Gets the records for a category, a.k.a. the personal bests of every user, ranked best-first.",
        "operationId": "getRecordsForCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of records to return. Fewer records may be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-based index at which to begin selecting records to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunViewModelListView"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/runs/{id}/category": {
      "get": {
        "tags": [
          "Runs"
        ],
        "summary": "Gets the category a run belongs to.",
        "operationId": "getRunCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryViewModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/runs/{id}": {
      "patch": {
        "tags": [
          "Runs"
        ],
        "summary": "Updates a run with the specified new fields. This request is restricted to administrators or users updating their own runs. Note: `runType` cannot be updated. This operation is atomic; if an error occurs, the run will not be updated. All fields of the request body are optional but you must specify at least one.",
        "operationId": "updateRun",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/UpdateTimedRunRequest"
                  },
                  {
                    "$ref": "#/components/schemas/UpdateScoredRunRequest"
                  }
                ],
                "description": "Request sent when updating a run.\nAll fields are optional but you must specify at least one."
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "The user attempted to update another user's run, the user is banned or not yet confirmed, or the user attempted to change the status of a run.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "The Run with ID `id` could not be found, or has been deleted. Read `title` for more information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Response can be a `ProblemDetails` for a request that doesn't match the run type of a category, or a `ValidationProblemDetails` otherwise.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Runs"
        ],
        "summary": "Deletes a Run.",
        "operationId": "deleteRun",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "The run does not exist (Not Found) or was already deleted (Already Deleted).\nUse the `title` field of the response to differentiate between the two cases if necessary.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets a User by their ID.",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the `User` which should be retrieved.",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9-_]{22}$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "The `User` was found and returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModel"
                }
              }
            }
          },
          "404": {
            "description": "No `User` with the requested ID could be found."
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Gets the currently logged-in User.",
        "description": "Call this method with the 'Authorization' header. A valid JWT bearer token must be\npassed.\nExample: `{ 'Authorization': 'Bearer JWT' }`.",
        "operationId": "me",
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "200": {
            "description": "The `User` was found and returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserViewModel"
                }
              }
            }
          },
          "401": {
            "description": "An invalid JWT was passed in."
          },
          "404": {
            "description": "The user was not found in the database."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CategoryViewModel": {
        "required": [
          "createdAt",
          "deletedAt",
          "id",
          "info",
          "leaderboardId",
          "name",
          "slug",
          "sortDirection",
          "status",
          "type",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the `Category`.\n",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The display name of the `Category`.",
            "example": "Foo Bar Baz%"
          },
          "slug": {
            "type": "string",
            "description": "The URL-scoped unique identifier of the `Category`.\n",
            "example": "foo-bar-baz"
          },
          "info": {
            "type": "string",
            "description": "Information pertaining to the `Category`.",
            "nullable": true,
            "example": "Video proof is required."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RunType"
              }
            ]
          },
          "sortDirection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SortDirection"
              }
            ]
          },
          "leaderboardId": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "1984-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "1984-01-01T00:00:00Z"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "1984-01-01T00:00:00Z"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ]
          }
        },
        "additionalProperties": false,
        "description": "Represents a `Category` tied to a `Leaderboard`."
      },
      "CategoryViewModelConflictDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "conflicting": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CategoryViewModel"
              }
            ],
            "description": "Represents a `Category` tied to a `Leaderboard`.",
            "nullable": true
          }
        },
        "additionalProperties": { },
        "description": "A fake ProblemDetails subclass used for deserialization and documentation. Do not instantiate!"
      },
      "CategoryViewModelListView": {
        "required": [
          "data",
          "limitDefault",
          "limitMax",
          "total"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryViewModel"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of records matching the given criteria that\nexist in the database, NOT the total number of records returned.",
            "format": "int64"
          },
          "limitDefault": {
            "type": "integer",
            "description": "The default limit that will be applied for this resource type\nif the client does not specify one in the query string.",
            "format": "int32"
          },
          "limitMax": {
            "type": "integer",
            "description": "The maximum value the client is allowed to specify as a limt for\nendpoints return a paginated list of resources of this type.\nExceeding this value will result in an error.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordRequest": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateCategoryRequest": {
        "required": [
          "name",
          "slug",
          "sortDirection",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The display name of the `Category`.",
            "example": "Foo Bar Baz%"
          },
          "slug": {
            "minLength": 1,
            "type": "string",
            "description": "The URL-scoped unique identifier of the `Category`.\n\nMust be [2, 25] in length and consist only of alphanumeric characters and hyphens.",
            "example": "foo-bar-baz"
          },
          "info": {
            "type": "string",
            "description": "Information pertaining to the `Category`.",
            "example": "Video proof is required."
          },
          "sortDirection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SortDirection"
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RunType"
              }
            ]
          }
        },
        "additionalProperties": false,
        "description": "This request object is sent when creating a `Category`."
      },
      "CreateLeaderboardRequest": {
        "required": [
          "name",
          "slug"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The display name of the `Leaderboard` to create.",
            "example": "Foo Bar"
          },
          "slug": {
            "minLength": 1,
            "type": "string",
            "description": "The URL-scoped unique identifier of the `Leaderboard`.\n\nMust be [2, 80] in length and consist only of alphanumeric characters and hyphens.",
            "example": "foo-bar"
          },
          "info": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "This request object is sent when creating a `Leaderboard`."
      },
      "CreateRunRequest": {
        "required": [
          "playedOn",
          "runType"
        ],
        "type": "object",
        "properties": {
          "runType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RunType"
              }
            ]
          },
          "info": {
            "type": "string"
          },
          "playedOn": {
            "type": "string",
            "description": "The date the `Run` was played on. Must obey the format 'YYYY-MM-DD', with leading zeroes.",
            "format": "date",
            "example": "2000-01-01"
          }
        },
        "additionalProperties": false,
        "description": "Request sent when creating a Run. Set `runType` to `\"Time\"` for a timed\nrequest, and `\"Score\"` for a scored one. `runType` *must* be at the top\nof the request object.",
        "discriminator": {
          "propertyName": "runType",
          "mapping": {
            "Time": "#/components/schemas/CreateTimedRunRequest",
            "Score": "#/components/schemas/CreateScoredRunRequest"
          }
        }
      },
      "CreateScoredRunRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateRunRequest"
          },
          {
            "required": [
              "score"
            ],
            "type": "object",
            "properties": {
              "score": {
                "type": "integer",
                "description": "The score achieved during the run.",
                "format": "int64"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "`runType: \"Score\"`"
      },
      "CreateTimedRunRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateRunRequest"
          },
          {
            "required": [
              "time"
            ],
            "type": "object",
            "properties": {
              "time": {
                "type": "string",
                "description": "The duration of the run. Must obey the format 'HH:mm:ss.sss', with leading zeroes.",
                "example": "12:34:56.999"
              }
            },
            "additionalProperties": false
          }
        ],
        "description": "`runType: \"Time\"`"
      },
      "LeaderboardViewModel": {
        "required": [
          "createdAt",
          "deletedAt",
          "id",
          "info",
          "name",
          "slug",
          "status",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the `Leaderboard`.\n\nGenerated on creation.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The display name of the `Leaderboard` to create.",
            "example": "Foo Bar"
          },
          "slug": {
            "type": "string",
            "description": "The URL-scoped unique identifier of the `Leaderboard`.\n\nMust be [2, 80] in length and consist only of alphanumeric characters and hyphens.",
            "example": "foo-bar"
          },
          "info": {
            "type": "string",
            "description": "The general information for the Leaderboard.",
            "example": "Timer starts on selecting New Game and ends when the final boss is beaten."
          },
          "createdAt": {
            "type": "string",
            "description": "The time the Leaderboard was created.",
            "format": "date-time",
            "example": "1984-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last time the Leaderboard was updated or null.",
            "format": "date-time",
            "nullable": true,
            "example": "1984-01-01T00:00:00Z"
          },
          "deletedAt": {
            "type": "string",
            "description": "The time at which the Leaderboard was deleted, or null if the Leaderboard has not been deleted.",
            "format": "date-time",
            "nullable": true,
            "example": "1984-01-01T00:00:00Z"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ]
          }
        },
        "additionalProperties": false,
        "description": "Represents a collection of `Leaderboard` entities."
      },
      "LeaderboardViewModelConflictDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "conflicting": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LeaderboardViewModel"
              }
            ],
            "description": "Represents a collection of `Leaderboard` entities.",
            "nullable": true
          }
        },
        "additionalProperties": { },
        "description": "A fake ProblemDetails subclass used for deserialization and documentation. Do not instantiate!"
      },
      "LeaderboardViewModelListView": {
        "required": [
          "data",
          "limitDefault",
          "limitMax",
          "total"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaderboardViewModel"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of records matching the given criteria that\nexist in the database, NOT the total number of records returned.",
            "format": "int64"
          },
          "limitDefault": {
            "type": "integer",
            "description": "The default limit that will be applied for this resource type\nif the client does not specify one in the query string.",
            "format": "int32"
          },
          "limitMax": {
            "type": "integer",
            "description": "The maximum value the client is allowed to specify as a limt for\nendpoints return a paginated list of resources of this type.\nExceeding this value will result in an error.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "The `User`'s email address.",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "minLength": 1,
            "type": "string",
            "description": "The `User`'s password. It:\n<ul><li>supports Unicode;</li><li>must be [8, 80] in length;</li><li>must have at least:</li><ul><li>one uppercase letter;</li><li>one lowercase letter; and</li><li>one number.</li></ul></ul>",
            "example": "P4ssword"
          }
        },
        "additionalProperties": false,
        "description": "This request object is sent when a `User` is attempting to log in."
      },
      "LoginResponse": {
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "minLength": 1,
            "type": "string",
            "description": "A JSON Web Token to authenticate and authorize queries with."
          }
        },
        "additionalProperties": false,
        "description": "This response object is received upon a successful log-in request."
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "RecoverAccountRequest": {
        "required": [
          "email",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "minLength": 1,
            "type": "string",
            "description": "The user's name."
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "The user's email address.",
            "format": "email"
          }
        },
        "additionalProperties": false
      },
      "RegisterRequest": {
        "required": [
          "email",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "minLength": 1,
            "type": "string",
            "description": "The username of the `User`. It:\n<ul><li>must be [2, 25] in length;</li><li>must be made up of letters sandwiching zero or one of:</li><ul><li>hyphen;</li><li>underscore; or</li><li>apostrophe</li></ul></ul>\nUsernames are saved case-sensitively, but matched against case-insensitively.\nA `User` may not register with the name 'Cool' when another `User` with the name 'cool'\nexists.",
            "example": "J'on-Doe"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "The `User`'s email address.",
            "example": "john.doe@example.com"
          },
          "password": {
            "minLength": 1,
            "type": "string",
            "description": "The `User`'s password. It:\n<ul><li>supports Unicode;</li><li>must be [8, 80] in length;</li><li>must have at least:</li><ul><li>one uppercase letter;</li><li>one lowercase letter; and</li><li>one number.</li></ul></ul>",
            "example": "P4ssword"
          }
        },
        "additionalProperties": false,
        "description": "This request object is sent when a `User` is attempting to register."
      },
      "RunType": {
        "enum": [
          "Time",
          "Score"
        ],
        "type": "string"
      },
      "RunViewModel": {
        "required": [
          "categoryId",
          "createdAt",
          "deletedAt",
          "id",
          "info",
          "playedOn",
          "runType",
          "status",
          "updatedAt",
          "user"
        ],
        "type": "object",
        "properties": {
          "runType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RunType"
              }
            ]
          },
          "id": {
            "pattern": "^[a-zA-Z0-9-_]{22}$",
            "type": "string",
            "description": "The unique identifier of the `Run`.\n\nGenerated on creation."
          },
          "info": {
            "type": "string",
            "description": "User-provided details about the run.",
            "nullable": true
          },
          "playedOn": {
            "type": "string",
            "description": "The date the run was done, *not* when it was submitted.",
            "format": "date",
            "example": "2000-01-01"
          },
          "createdAt": {
            "type": "string",
            "description": "The time the run was submitted to the DB.",
            "format": "date-time",
            "example": "1984-01-01T00:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "description": "The last time the run was updated or null.",
            "format": "date-time",
            "nullable": true,
            "example": "1984-01-01T00:00:00Z"
          },
          "deletedAt": {
            "type": "string",
            "description": "The time at which the run was deleted, or null if the run has not been deleted.",
            "format": "date-time",
            "nullable": true,
            "example": "1984-01-01T00:00:00Z"
          },
          "categoryId": {
            "type": "integer",
            "description": "The ID of the `Category` for `Run`.",
            "format": "int64"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserViewModel"
              }
            ],
            "description": "The user who submitted this run."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ]
          },
          "rank": {
            "type": "integer",
            "description": "The record's rank for its category. Will be 0 if it's not part of\nrecord retrieval.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "runType",
          "mapping": {
            "Time": "#/components/schemas/TimedRunViewModel",
            "Score": "#/components/schemas/ScoredRunViewModel"
          }
        }
      },
      "RunViewModelListView": {
        "required": [
          "data",
          "limitDefault",
          "limitMax",
          "total"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TimedRunViewModel"
                },
                {
                  "$ref": "#/components/schemas/ScoredRunViewModel"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of records matching the given criteria that\nexist in the database, NOT the total number of records returned.",
            "format": "int64"
          },
          "limitDefault": {
            "type": "integer",
            "description": "The default limit that will be applied for this resource type\nif the client does not specify one in the query string.",
            "format": "int32"
          },
          "limitMax": {
            "type": "integer",
            "description": "The maximum value the client is allowed to specify as a limt for\nendpoints return a paginated list of resources of this type.\nExceeding this value will result in an error.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ScoredRunViewModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RunViewModel"
          },
          {
            "required": [
              "score"
            ],
            "type": "object",
            "properties": {
              "score": {
                "type": "integer",
                "description": "The score achieved during the run.",
                "format": "int64"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SortDirection": {
        "enum": [
          "Ascending",
          "Descending"
        ],
        "type": "string"
      },
      "SortLeaderboardsBy": {
        "enum": [
          "Name_Asc",
          "Name_Desc",
          "CreatedAt_Asc",
          "CreatedAt_Desc"
        ],
        "type": "string",
        "description": "Used in GetLeaderboards to sort leaderboards by a field."
      },
      "Status": {
        "enum": [
          "Published",
          "Deleted"
        ],
        "type": "string"
      },
      "StatusFilter": {
        "enum": [
          "Published",
          "Deleted",
          "Any"
        ],
        "type": "string"
      },
      "TimedRunViewModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RunViewModel"
          },
          {
            "required": [
              "time"
            ],
            "type": "object",
            "properties": {
              "time": {
                "type": "string",
                "description": "The duration of the run.",
                "example": "25:01:01.001"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UpdateCategoryRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "info": {
            "type": "string"
          },
          "sortDirection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SortDirection"
              }
            ],
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateLeaderboardRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "info": {
            "type": "string"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateRunRequest": {
        "required": [
          "runType"
        ],
        "type": "object",
        "properties": {
          "runType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RunType"
              }
            ]
          },
          "info": {
            "type": "string"
          },
          "playedOn": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2000-01-01"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request sent when updating a run.\nAll fields are optional but you must specify at least one.",
        "discriminator": {
          "propertyName": "runType",
          "mapping": {
            "Time": "#/components/schemas/UpdateTimedRunRequest",
            "Score": "#/components/schemas/UpdateScoredRunRequest"
          }
        }
      },
      "UpdateScoredRunRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateRunRequest"
          },
          {
            "type": "object",
            "properties": {
              "score": {
                "type": "integer",
                "format": "int64",
                "nullable": true
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UpdateTimedRunRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateRunRequest"
          },
          {
            "type": "object",
            "properties": {
              "time": {
                "type": "string",
                "nullable": true,
                "example": "25:01:01.001"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "UserRole": {
        "enum": [
          "Registered",
          "Confirmed",
          "Administrator",
          "Banned"
        ],
        "type": "string"
      },
      "UserViewModel": {
        "required": [
          "createdAt",
          "id",
          "role",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "pattern": "^[a-zA-Z0-9-_]{22}$",
            "type": "string",
            "description": "The unique identifier of the `User`.\n\nGenerated on creation."
          },
          "username": {
            "type": "string",
            "description": "The username of the `User`. It:\n<ul><li>must be [2, 25] in length;</li><li>must be made up of alphanumeric characters around zero or one of:</li><ul><li>hyphen;</li><li>underscore; or</li><li>apostrophe</li></ul></ul>\nUsernames are saved case-sensitively, but matcehd against case-insensitively.\nA `User` may not register with the name 'Cool' when another `User` with the name 'cool'\nexists.",
            "example": "J'on-Doe"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRole"
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "1984-01-01T00:00:00Z"
          }
        },
        "additionalProperties": false
      },
      "ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": { }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "JWT Authorization using the Bearer scheme",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}